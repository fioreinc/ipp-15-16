#include <HX711.h>
#define DOUT  3
#define CLK  2

HX711 scale(DOUT, CLK);

float calibration_factor = -7050; //-7050 worked for my 440lb max scale setup
float weight = 5.0;
float threshold = .1;

enum states_e{
    AWAITING_CMD,
    READING_DATA
} states_t;

enum states_e curr_state;



void get_calibration() {
    /*
    scale.set_scale();
    scale.tare();  //Reset the scale to 0

    //long zero_factor = scale.read_average(); //Get a baseline reading
    //Serial.print("Zero factor: "); //This can be used to remove the need to tare the scale. Useful in permanent scale projects.
    //Serial.println(zero_factor);

    while (true) {
        scale.set_scale(calibration_factor); //Adjust to this calibration factor
        float measured = abs(scale.get_units());
        if ( abs(measured - weight) < threshold) {
            break;
        }
        else {
            if (measured < weight) {
                calibration_factor += 10;
            }
            else {
                calibration_factor -= 10;
            }
        }
        Serial.println(measured);
    }
    */
}

void read_data(){
  Serial.print(abs(scale.get_units()), 10);           //absolute value of reading
  Serial.print(" lbs");
}

void execute_cmd(){
    Serial.print("DOGS");
    /*
    const char start_char = '[';
    const char end_char = ']';
    char c;
    String cmd = "";
    while(!Serial.available()) Serial.print("Waiting\n"); //Wait until there is data available
    while(Serial.read() != start_char); //Ignore all characters that aren't the start char
    while(1){ //Read until we reach the end char
        if(Serial.available()){
            if((c = Serial.read() != end_char)){
                cmd += c;
            }
            else{
                break;//We've found our command
            }
        }
    }

    if(cmd == "init_scale"){
        Serial.println("Finding calibration factor");
        get_calibration();
        Serial.println("Calibration factor found");
        Serial.println("Awaiting next command");
    }

    if(cmd == "read_data"){
        curr_state = READING_DATA;
    }
    */

}

void setup() {

    //Set up the serial port baud rate
    curr_state = AWAITING_CMD;
    Serial.begin(9600);
    //Serial.println("HX711 calibration sketch");
    //Serial.println("Remove all weight from scale");
    //Serial.println("After readings begin, place known weight on scale");
    //Serial.println("Press + to increase calibration factor");
    //Serial.println("Press - to decrease calibration factor");


}



void loop() {
    switch(curr_state){
        case AWAITING_CMD:
            execute_cmd();
            break;
        case READING_DATA:
            read_data();
            break;
    }

}
